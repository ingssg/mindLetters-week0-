from flask import Blueprint, render_template, jsonify, redirect, url_for, request
from db import articles_collection, users_collection
from datetime import datetime, timedelta
import jwt
import os
import hashlib
from flask import jsonify, request

from flask_jwt_extended import (create_access_token, set_access_cookies)

# html 파일이 있는 folder path 정의
users_blueprint = Blueprint("users_blueprint", __name__, template_folder="../templates/users")

JWT_SECRET_KEY = os.getenv("JWT_SECRET_KEY")


# JWT 토큰 생성
# def generate_jwt_token(user_id):
#     payload = {
#         '_id': str(user_id),
#         'exp': datetime.utcnow() + timedelta(minutes=30)
#     }
#     token = jwt.encode(payload, JWT_SECRET_KEY, algorithm='HS256')
#     return token


# 솔트 생성
def generate_salt():
    return os.urandom(16).hex()


# 비밀번호 솔팅, 키 스트레칭
def hash_password(password, salt):
    hashed_password = password
    for _ in range(1328):  # 반복 횟수 1000~10000 사이 값 (서버 과부하 방지 및 보안 고려)
        hashed_password = hashlib.sha256((hashed_password + salt).encode()).hexdigest()
    return hashed_password


@users_blueprint.route("/signin")
def signin():
    return render_template('signin.html')


@users_blueprint.route("/signin", methods=["POST"])
def signin_user():
    # 로그인 기능 구현
    user = {
        'id': request.form.get('id', ''),
        'password': request.form.get('password', ''),
    }

    # 빈 인풋 체크
    if not user['id'] or not user['password']:
        return render_template('signin.html', error="모든 필드를 입력해주세요.")

    user_info = users_collection.find_one({"id": user['id']})

    if not user_info:
        return render_template('signin.html', error="존재하지 않는 아이디입니다.")

    if(hash_password(user['password'], user_info['salt']) != user_info['hashed_password']):

    if hash_password(user['password'], user_info['salt']) != user_info['hashed_password']:
        return render_template('signin.html', error="비밀번호가 일치하지 않습니다.")

    # https://flask-jwt-extended.readthedocs.io/en/3.0.0_release/tokens_in_cookies/
    # JWT 토큰 생성
    resp = jsonify({'login': True})
    access_token = create_access_token({'_id': str(user_info['_id'])}, expires_delta=timedelta(minutes=120))
    set_access_cookies(resp, access_token)

    # jwt_token = generate_jwt_token(user_info['_id'])

    return resp, 200

@users_blueprint.route("/signup")
def signup():
    return render_template('signup.html')


@users_blueprint.route("/signup", methods=["POST"])
def create_user():
    # 회원 가입 기능 구현
    isSignUp = False
    salt = generate_salt()

    user = {
        'id': request.form.get('id', ''),
        'hashed_password': '',
        'nickname': request.form.get('nickname', ''),
        'salt': salt,
        'createdAt': datetime.now(),
    }

    # 회원 가입 로직
    # 빈 인풋 체크
    if not user['id'] or not request.form.get('password', '') or not request.form.get('password-confirm', '') or not \
            user['nickname']:
        return render_template('signup.html', error="모든 필드를 입력해주세요.")

    # 비밀번호 길이 확인
    if len(request.form['password']) < 8:
        return render_template('signup.html', error="비밀번호는 최소 8자 이상이어야 합니다.")

    # 비밀번호 & 비밀번호 확인 일치 여부 확인
    if request.form['password'] != request.form['password-confirm']:
        return render_template('signup.html', error="비밀번호와 비밀번호 확인이 일치하지 않습니다.")

    user['hashed_password'] = hash_password(request.form['password'], salt)

    isSignUp = True
    print(user)
    # DB에 유저 정보 추가
    users_collection.insert_one(user)

    return render_template('signin.html', isSignUp=isSignUp)



아티클리스트
{% extends "layout.html" %}
{% block content %}
<style>
    .card-container {
        padding: 20px;
        background-color: #e0f7fa;
    }

    .btn-wrapper {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px; /* 우측 여백 추가 */
        /* 상하 여백 추가 */
        padding: 10px 0 10px 10%;
        border-radius: 10px; /* 모서리 둥글게 */
        width: 90%; /* 가로 길이를 현재의 80%로 설정 */
    }

    .btn-like {
        color: #ff4081;
        margin-left: auto;
    }

    .btn-like {
        background-color: #99ccff;
        color: #ffffff;
        margin-left: auto;
        border: none;
    }

    .btn-like:hover {
        background-color: #87bfff;
        color: #000000;
    }

    .btn-edit, .btn-delete {
        background-color: #f8d7da;
        color: #721c24;
        border: none;
        margin-left: 10px;
    }

    .btn-edit {
        background-color: #d4edda;
        color: #155724;
    }

    .btn-edit:hover {
        color: #FFFFFF;
    }

    .btn-delete:hover {
        color: #FFFFFF;
    }

    .card {
        margin-bottom: 20px;
        border-radius: 15px;
        width: 80%;
    }

    .card-body {
        display: flex;
        align-items: center;
    }

    .card-text-container {
        flex-grow: 1;
        cursor: pointer;
    }

    .card-text {
        text-align: center;
        margin-bottom: 20px;
    }

    .tag {
        font-size: 0.7rem;
        margin-left: 2px;
        /*color: #6c757d;*/
    }

    .btn-edit, .btn-delete {
        display: none;
    }

    .author-visible .btn-edit,
    .author-visible .btn-delete {
        display: inline-block;
    }

    .card-title {
        margin-bottom: 10px;
    }

    .text-muted-author {
        display: block;
        margin-top: 20px;
    }

    .text-muted-createdAt {
        display: block;
        margin-top: 30px;
    }

    .card-row {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 20px;
    }

    .pagination a, .pagination span {
        display: inline-block;
        padding: 5px 10px;
        margin: 0 2px;
        border: 1px solid #ccc;
        border-radius: 3px;
        text-decoration: none;
        color: #333;
    }

    .pagination a:hover {
        background-color: #f4f4f4;
    }

    .pagination .current {
        background-color: #007bff;
        color: #fff;
        border: 1px solid #007bff;
    }
</style>

<script>
    function likeArticle(btn) {
        const divElement = btn.closest('div');
        const articleId = divElement.getAttribute('data-id');

        $.ajax({
            type: 'POST',
            url: `/articles/likes/${articleId}`,
            success: function (response) {
                if (response['result'] == "success") {
                    window.location.reload()
                } else {
                    alert("서버 오류!")
                }
            }
        })
    }

    function dislikeArticle(btn) {
        const divElement = btn.closest('div');
        const articleId = divElement.getAttribute('data-id');

        $.ajax({
            type: 'DELETE',
            url: `/articles/likes/${articleId}`,
            success: function (response) {
                if (response['result'] == "success") {
                    window.location.reload()
                } else {
                    alert("서버 오류!")
                }
            }
        })
    }

    function deleteArticle(btn) {
        const divElement = btn.closest('div')
        const articleId = divElement.getAttribute('data-id')

        $.ajax({
            type: 'DELETE',
            url: `/articles/${articleId}`,
            success: function (response) {
                if (response['result'] == "success") {
                    alert('게시글이 삭제되었습니다.')
                    window.location.reload()
                } else {
                    alert("서버 오류!")
                }
            }
        })
    }
</script>

<div class="container card-container">
    <div class="btn-wrapper">
        <label style="font-size: 18px;">
            <select name="topic" id="topicSelect" class="form-control select-box"
                    onchange="window.location.href = `/articles?topic=${this.value}`">
                {% if (topic == "all") %}
                <option value="all" selected>전체 보기</option>
                <option value="good">칭찬해요</option>
                <option value="bad">싫어요</option>
                {% endif %}
                {% if (topic == "good") %}
                <option value="all">전체 보기</option>
                <option value="good" selected>칭찬해요</option>
                <option value="bad">싫어요</option>
                {% endif %}
                {% if (topic == "bad") %}
                <option value="all">전체 보기</option>
                <option value="good">칭찬해요</option>
                <option value="bad" selected>싫어요</option>
                {% endif %}
            </select>
        </label>
        <button type="button" class="btn btn-primary" onclick="window.location.href = `/articles/new`">작성하기</button>
    </div>

    <div class="row">
        {% for article in articles %}
        <div class="col-md-6 card-row" data-id="{{ article._id }}">
            <div class="card">
                <div class="card-body" data-id="{{ article._id}}">
                    <div class="card-text-container"
                         onclick="window.location.href = `/articles/${this.parentElement.getAttribute('data-id')}`">
                        <h5 class="card-title">{{ article.title }}<span
                                class="tag">(댓글 {{ article.comments|length }})</span><span class="tag">(공감 {{ article.likes|length }})</span>
                        </h5>

                        <h6 class="card-subtitle mb-2 text-muted-author">작성자:
                            {% if (article.is_blind == True) %}
                            익명
                            {% else %}
                            {{ article.author.nickname }}
                            {% endif %}
                        </h6>

                        <p><small class="text-muted-createdAt">작성일: {{ article.created_at }}</small></p>
                    </div>
                    <div class="author-visible" data-id="{{article._id}}">
                        {% if (article.topic == "good") %}
                        <p class="card-text">칭찬해요 😍</p>
                        {% else %}
                        <p class="card-text">싫어요 🥲</p>
                        {% endif %}
                        {% if (userId == article.author._id) %}
                        <button type="button" class="btn btn-edit"
                                onclick="window.location.href = `/articles/modify/${this.parentElement.getAttribute('data-id')}`">
                            수정
                        </button>
                        <button type="button" class="btn btn-delete" onclick="deleteArticle(this)">삭제</button>
                        {% elif (userId in article.likes) %}
                        <a class="btn btn-like" onclick="dislikeArticle(this)">공감취소</a>
                        {% else %}
                        <a class="btn btn-like" onclick="likeArticle(this)">공감하기</a>
                        {% endif %}
                    </div>
                </div>

            </div>
        </div>
        {% endfor %}
    </div>
    <div class="pagination">
        {% if pagination['page'] > 2 %}
        <a href="?page=1&topic={{ topic }}">&laquo;</a>
        {% endif %}
        {% if pagination['page'] > 1 %}
        <a href="?page={{ pagination['page'] - 1 }}&topic={{ topic }}">&lsaquo;</a>
        {% endif %}
        {% for page in range(pagination['start_page'], pagination['end_page'] + 1) %}
        {% if page == pagination['page'] %}
        <span class="current">{{ page }}</span>
        {% else %}
        <a href="?page={{ page }}&topic={{ topic }}">{{ page }}</a>
        {% endif %}
        {% endfor %}
        {% if pagination['page'] < pagination['end_page'] %}
        <a href="?page={{ pagination['page'] + 1 }}&topic={{ topic }}">&rsaquo;</a>
        {% endif %}
        {% if pagination['page'] < pagination['end_page'] - 1 %}
        <a href="?page={{ pagination['end_page'] }}&topic={{ topic }}">&raquo;</a>
        {% endif %}
    </div>
</div>
{% endblock %}
